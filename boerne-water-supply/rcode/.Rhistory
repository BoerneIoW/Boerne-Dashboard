onegamma <- fitdist(PRECIPdf$X1981,"gamma","mge")
fitdist(PRECIPdf$X1981,"gamma","mge")
rm(list = ls())
setwd("~/Desktop/MS Thesis")
PRECIPdf<-read.csv("~/Desktop/MS Thesis/BoernePPTMeanSD.csv")
PRECIPdf[is.na(PRECIPdf)] <- 0
# 1981
plotdist(PRECIPdf$X1981, histo = TRUE, demp = TRUE)
fitdist(PRECIPdf$X1981,"gamma","mge")
onegamma <- fitdist(PRECIPdf$X1981,"gamma","mge")
onelnorm <- fitdist(PRECIPdf$X1981,"lnorm","mge")
# 1981
plotdist(PRECIPdf$X1981, histo = TRUE, demp = TRUE)
fw <- fitdist(PRECIPdf$X1981, "weibull")
PRECIPdf[is.na(PRECIPdf)] <- 0
# 1981
plotdist(PRECIPdf$X1981, histo = TRUE, demp = TRUE)
fw <- fitdist(PRECIPdf$X1981, "weibull")
# 1981
plotdist(PRECIPdf$X1981, histo = TRUE, demp = TRUE)
weibullfit  <-  fitdist(springvector, distr = "weibull", method = "mse")
springvector <- dplyr::pull(springdf)
rm(list = ls())
springdf<-read.csv("~/Desktop/BoernePPTMeanSD-SPRING.csv")
springdf<-read.csv("~/Desktop/BoernePPTMeanSD-SPRING.csv")
library(dplyr)
library(matrixStats)
library(matrixStats)
springdf[is.na(springdf)] <- 0
springvector <- dplyr::pull(springdf)
typeof(springvector)
class(springvector)
typeof(springdf)
length(springdf)
class(springdf)
str(springdf)
library("fitdistrplus")
springvector <- dplyr::pull(springdf)
typeof(springvector)
class(springvector)
normalfit <- fitdistr(springvector, "normal")
gammafit  <-  fitdist(springvector, distr = "gamma", method = "mse")
rm(list = ls())
setwd("~/Desktop/MS Thesis")
PRECIPdf<-read.csv("~/Desktop/MS Thesis/BoernePPTMeanSD.csv")
PRECIPdf[is.na(PRECIPdf)] <- 0
# 1981
plotdist(PRECIPdf$X1981, histo = TRUE, demp = TRUE)
fw <- fitdist(PRECIPdf$X1981, "weibull")
onegamma <- fitdist(PRECIPdf$X1981,"gamma","mge")
dweibull(PRECIPdf, shape, scale = 1, log = FALSE)
dweibull(PRECIPdf, scale = 1, log = FALSE)
dweibull(PRECIPdf, shape = 1, scale = 1, log = FALSE)
dweibull(PRECIPdf, shape = 2, scale = 1, log = FALSE)
rm(list = ls())
curve(dweibull(x, shape=2, scale = 1), from=0, to=4)
rm(list = ls())
setwd("~/Desktop/MS Thesis")
summerdf<-read.csv("~/Desktop/BoerneSUMMERPPT.csv")
View(summerdf)
library(dplyr)
library(dplyr)
library(matrixStats)
typeof(springdf)
typeof(summerdf)
length(summerdf)
class(summerdf)
str(summerdf)
rm(list = ls())
setwd("~/Desktop/MS Thesis")
summerdf<-read.csv("~/Desktop/BoerneSUMMERPPT.csv")
library(dplyr)
library(matrixStats)
View(summerdf)
typeof(summerdf)
length(summerdf)
class(summerdf)
str(summerdf)
library("fitdistrplus")
library("fitdistrplus")
summervector <- dplyr::pull(summerdf)
typeof(summerdf)
class(summerdf)
summervector <- dplyr::pull(summerdf, X1981)
1981vector <- dplyr::pull(summerdf, X1981)
X1981vector <- dplyr::pull(summerdf, X1981)
typeof(summerdf)
class(summerdf)
typeof(X1981vector)
class(X1981vector)
curve(dweibull(X1981vector, shape=2, scale = 1), from=0, to=4)
dweibull(x, shape, scale = 1, log = FALSE)
dweibull(X1981vector, shape, scale = 1, log = FALSE)
dweibull(X1981vector, shape = 2, scale = 1, log = FALSE)
curve(dweibull(X1981vector, shape=2, scale = 1), from=0, to=4)
dweibull(X1981vector, shape = 2, scale = 1, log = FALSE)
curve(dweibull(X1981vector, shape=2, scale = 1), from=0, to=4)
curve(dweibull(x, shape=2, scale = 1), from=0, to=4)
curve(dweibull(X1981vector, shape=1, scale = 1), from=0, to=1)
pweibull(X1981vector, shape = 1, scale = 1, lower.tail = TRUE, log.p = FALSE)
dweibull(X1981vector, shape = 1, scale = 1, log = FALSE)
pweibull(X1981vector, shape = 1, scale = 1, lower.tail = TRUE, log.p = FALSE)
dweibull(X1981vector, shape = 1, scale = 1, log = FALSE)
pweibull(X1981vector, shape = 1, scale = 1, lower.tail = TRUE, log.p = FALSE)
rm(list = ls())
setwd("~/Desktop/MS Thesis")
SPRINGdf<-read.csv("~/Desktop/BoernePrecip(mm)SPRING.csv")
SUMMERdf<-read.csv("~/Desktop/BoernePrecip(mm)SUMMER.csv")
FALLdf<-read.csv("~/Desktop/BoernePrecip(mm)FALL.csv")
WINTERdf<-read.csv("~/Desktop/BoernePrecip(mm)WINTER.csv")
library(dplyr)
library(matrixStats)
library("fitdistrplus")
# Vectors: SPRING
SpringX1981 <- dplyr::pull(SPRINGdf, X1981)
SpringX1982 <- dplyr::pull(SPRINGdf, X1982)
SpringX1983 <- dplyr::pull(SPRINGdf, X1983)
SpringX1984 <- dplyr::pull(SPRINGdf, X1984)
SpringX1985 <- dplyr::pull(SPRINGdf, X1985)
SpringX1986 <- dplyr::pull(SPRINGdf, X1986)
SpringX1987 <- dplyr::pull(SPRINGdf, X1987)
SpringX1988 <- dplyr::pull(SPRINGdf, X1988)
SpringX1989 <- dplyr::pull(SPRINGdf, X1989)
SpringX1990 <- dplyr::pull(SPRINGdf, X1990)
SpringX1991 <- dplyr::pull(SPRINGdf, X1991)
SpringX1992 <- dplyr::pull(SPRINGdf, X1992)
SpringX1993 <- dplyr::pull(SPRINGdf, X1993)
SpringX1994 <- dplyr::pull(SPRINGdf, X1994)
SpringX1995 <- dplyr::pull(SPRINGdf, X1995)
SpringX1996 <- dplyr::pull(SPRINGdf, X1996)
SpringX1997 <- dplyr::pull(SPRINGdf, X1997)
SpringX1998 <- dplyr::pull(SPRINGdf, X1998)
SpringX1999 <- dplyr::pull(SPRINGdf, X1999)
SpringX2000 <- dplyr::pull(SPRINGdf, X2000)
SpringX2001 <- dplyr::pull(SPRINGdf, X2001)
SpringX2002 <- dplyr::pull(SPRINGdf, X2002)
SpringX2003 <- dplyr::pull(SPRINGdf, X2003)
SpringX2004 <- dplyr::pull(SPRINGdf, X2004)
SpringX2005 <- dplyr::pull(SPRINGdf, X2005)
SpringX2006 <- dplyr::pull(SPRINGdf, X2006)
SpringX2007 <- dplyr::pull(SPRINGdf, X2007)
SpringX2008 <- dplyr::pull(SPRINGdf, X2008)
SpringX2009 <- dplyr::pull(SPRINGdf, X2009)
SpringX2010 <- dplyr::pull(SPRINGdf, X2010)
SpringX2011 <- dplyr::pull(SPRINGdf, X2011)
SpringX2012 <- dplyr::pull(SPRINGdf, X2012)
SpringX2013 <- dplyr::pull(SPRINGdf, X2013)
SpringX2014 <- dplyr::pull(SPRINGdf, X2014)
SpringX2015 <- dplyr::pull(SPRINGdf, X2015)
SpringX2016 <- dplyr::pull(SPRINGdf, X2016)
SpringX2017 <- dplyr::pull(SPRINGdf, X2017)
SpringX2018 <- dplyr::pull(SPRINGdf, X2018)
SpringX2019 <- dplyr::pull(SPRINGdf, X2019)
SpringX2020 <- dplyr::pull(SPRINGdf, X2020)
SummerX1981 <- dplyr::pull(SUMMERdf, X1981)
SummerX1982 <- dplyr::pull(SUMMERdf, X1982)
SummerX1983 <- dplyr::pull(SUMMERdf, X1983)
SummerX1984 <- dplyr::pull(SUMMERdf, X1984)
SummerX1985 <- dplyr::pull(SUMMERdf, X1985)
SummerX1986 <- dplyr::pull(SUMMERdf, X1986)
SummerX1987 <- dplyr::pull(SUMMERdf, X1987)
SummerX1988 <- dplyr::pull(SUMMERdf, X1988)
SummerX1989 <- dplyr::pull(SUMMERdf, X1989)
SummerX1990 <- dplyr::pull(SUMMERdf, X1990)
SummerX1991 <- dplyr::pull(SUMMERdf, X1991)
SummerX1992 <- dplyr::pull(SUMMERdf, X1992)
SummerX1993 <- dplyr::pull(SUMMERdf, X1993)
SummerX1994 <- dplyr::pull(SUMMERdf, X1994)
SummerX1995 <- dplyr::pull(SUMMERdf, X1995)
SummerX1996 <- dplyr::pull(SUMMERdf, X1996)
SummerX1997 <- dplyr::pull(SUMMERdf, X1997)
SummerX1998 <- dplyr::pull(SUMMERdf, X1998)
SummerX1999 <- dplyr::pull(SUMMERdf, X1999)
SummerX2000 <- dplyr::pull(SUMMERdf, X2000)
SummerX2001 <- dplyr::pull(SUMMERdf, X2001)
SummerX2002 <- dplyr::pull(SUMMERdf, X2002)
SummerX2003 <- dplyr::pull(SUMMERdf, X2003)
SummerX2004 <- dplyr::pull(SUMMERdf, X2004)
SummerX2005 <- dplyr::pull(SUMMERdf, X2005)
SummerX2006 <- dplyr::pull(SUMMERdf, X2006)
SummerX2007 <- dplyr::pull(SUMMERdf, X2007)
SummerX2008 <- dplyr::pull(SUMMERdf, X2008)
SummerX2009 <- dplyr::pull(SUMMERdf, X2009)
SummerX2010 <- dplyr::pull(SUMMERdf, X2010)
SummerX2011 <- dplyr::pull(SUMMERdf, X2011)
SummerX2012 <- dplyr::pull(SUMMERdf, X2012)
SummerX2013 <- dplyr::pull(SUMMERdf, X2013)
SummerX2014 <- dplyr::pull(SUMMERdf, X2014)
SummerX2015 <- dplyr::pull(SUMMERdf, X2015)
SummerX2016 <- dplyr::pull(SUMMERdf, X2016)
SummerX2017 <- dplyr::pull(SUMMERdf, X2017)
SummerX2018 <- dplyr::pull(SUMMERdf, X2018)
SummerX2019 <- dplyr::pull(SUMMERdf, X2019)
SummerX2020 <- dplyr::pull(SUMMERdf, X2020)
FallX1981 <- dplyr::pull(FALLdf, X1981)
FallX1982 <- dplyr::pull(FALLdf, X1982)
FallX1983 <- dplyr::pull(FALLdf, X1983)
FallX1984 <- dplyr::pull(FALLdf, X1984)
FallX1985 <- dplyr::pull(FALLdf, X1985)
FallX1986 <- dplyr::pull(FALLdf, X1986)
FallX1987 <- dplyr::pull(FALLdf, X1987)
FallX1988 <- dplyr::pull(FALLdf, X1988)
FallX1989 <- dplyr::pull(FALLdf, X1989)
FallX1990 <- dplyr::pull(FALLdf, X1990)
FallX1991 <- dplyr::pull(FALLdf, X1991)
FallX1992 <- dplyr::pull(FALLdf, X1992)
FallX1993 <- dplyr::pull(FALLdf, X1993)
FallX1994 <- dplyr::pull(FALLdf, X1994)
FallX1995 <- dplyr::pull(FALLdf, X1995)
FallX1996 <- dplyr::pull(FALLdf, X1996)
FallX1997 <- dplyr::pull(FALLdf, X1997)
FallX1998 <- dplyr::pull(FALLdf, X1998)
FallX1999 <- dplyr::pull(FALLdf, X1999)
FallX2000 <- dplyr::pull(FALLdf, X2000)
FallX2001 <- dplyr::pull(FALLdf, X2001)
FallX2002 <- dplyr::pull(FALLdf, X2002)
FallX2003 <- dplyr::pull(FALLdf, X2003)
FallX2004 <- dplyr::pull(FALLdf, X2004)
FallX2005 <- dplyr::pull(FALLdf, X2005)
FallX2006 <- dplyr::pull(FALLdf, X2006)
FallX2007 <- dplyr::pull(FALLdf, X2007)
FallX2008 <- dplyr::pull(FALLdf, X2008)
FallX2009 <- dplyr::pull(FALLdf, X2009)
FallX2010 <- dplyr::pull(FALLdf, X2010)
FallX2011 <- dplyr::pull(FALLdf, X2011)
FallX2012 <- dplyr::pull(FALLdf, X2012)
FallX2013 <- dplyr::pull(FALLdf, X2013)
FallX2014 <- dplyr::pull(FALLdf, X2014)
FallX2015 <- dplyr::pull(FALLdf, X2015)
FallX2016 <- dplyr::pull(FALLdf, X2016)
FallX2017 <- dplyr::pull(FALLdf, X2017)
FallX2018 <- dplyr::pull(FALLdf, X2018)
FallX2019 <- dplyr::pull(FALLdf, X2019)
FallX2020 <- dplyr::pull(FALLdf, X2020)
WinterX1981 <- dplyr::pull(WINTERdf, X1981)
WinterX1982 <- dplyr::pull(WINTERdf, X1982)
WinterX1983 <- dplyr::pull(WINTERdf, X1983)
WinterX1984 <- dplyr::pull(WINTERdf, X1984)
WinterX1985 <- dplyr::pull(WINTERdf, X1985)
WinterX1986 <- dplyr::pull(WINTERdf, X1986)
WinterX1987 <- dplyr::pull(WINTERdf, X1987)
WinterX1988 <- dplyr::pull(WINTERdf, X1988)
WinterX1989 <- dplyr::pull(WINTERdf, X1989)
WinterX1990 <- dplyr::pull(WINTERdf, X1990)
WinterX1991 <- dplyr::pull(WINTERdf, X1991)
WinterX1992 <- dplyr::pull(WINTERdf, X1992)
WinterX1993 <- dplyr::pull(WINTERdf, X1993)
WinterX1994 <- dplyr::pull(WINTERdf, X1994)
WinterX1995 <- dplyr::pull(WINTERdf, X1995)
WinterX1996 <- dplyr::pull(WINTERdf, X1996)
WinterX1997 <- dplyr::pull(WINTERdf, X1997)
WinterX1998 <- dplyr::pull(WINTERdf, X1998)
WinterX1999 <- dplyr::pull(WINTERdf, X1999)
WinterX2000 <- dplyr::pull(WINTERdf, X2000)
WinterX2001 <- dplyr::pull(WINTERdf, X2001)
WinterX2002 <- dplyr::pull(WINTERdf, X2002)
WinterX2003 <- dplyr::pull(WINTERdf, X2003)
WinterX2004 <- dplyr::pull(WINTERdf, X2004)
WinterX2005 <- dplyr::pull(WINTERdf, X2005)
WinterX2006 <- dplyr::pull(WINTERdf, X2006)
WinterX2007 <- dplyr::pull(WINTERdf, X2007)
WinterX2008 <- dplyr::pull(WINTERdf, X2008)
WinterX2009 <- dplyr::pull(WINTERdf, X2009)
WinterX2010 <- dplyr::pull(WINTERdf, X2010)
WinterX2011 <- dplyr::pull(WINTERdf, X2011)
WinterX2012 <- dplyr::pull(WINTERdf, X2012)
WinterX2013 <- dplyr::pull(WINTERdf, X2013)
WinterX2014 <- dplyr::pull(WINTERdf, X2014)
WinterX2015 <- dplyr::pull(WINTERdf, X2015)
WinterX2016 <- dplyr::pull(WINTERdf, X2016)
WinterX2017 <- dplyr::pull(WINTERdf, X2017)
WinterX2018 <- dplyr::pull(WINTERdf, X2018)
WinterX2019 <- dplyr::pull(WINTERdf, X2019)
WinterX2020 <- dplyr::pull(WINTERdf, X2020)
View(WINTERdf)
fit <- lm(SUMMERdf$X1981 ~ SUMMERdf$X.1)
View(fit)
summary(fit)
fw <- fitdist(Springdf$X1981, "weibull")
library(dplyr)
library(matrixStats)
library("fitdistrplus")
fw <- fitdist(Springdf$X1981, "weibull")
fw <- fitdist(SPRINGdf$X1981, "weibull")
View(SPRINGdf)
fw <- fitdist(SPRINGX1981, "weibull")
fw <- fitdist(SpringX1981, "weibull")
gammafit  <-  fitdist(SpringX1981, distr = "gamma", method = "mle")
gammafit  <-  fitdist(SpringX1981, distr = "gamma", method = "mse")
knitr::opts_chunk$set(echo = TRUE)
# Load required packages (everytime the code is run)
library("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
packages = c("rstudioapi", "readxl",
"sf", "rgdal", "spData", "raster", "leaflet", "rmapshaper","geojsonio",
"tidycensus", "jsonlite", "rvest", "purrr", "httr",
"tidyverse", "lubridate", "plotly", "stringr", "rnoaa", "nhdplusTools")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install.packages("updateR")
install.packages("nhdplusTools")
R.version.string
R.version.string
R.version.string
install.packages("nhdplusTools")
R.version.string
R.version.string
R.version.string
R.version.string
gw.boerne <- read_sf(paste0(swd_data, "gw/all_boerne_gw_sites.geojson"))
rm(list=ls()) #removes anything stored in memory
######################################################################################################################################################################
#
#   LOAD LIBRARIES
#
######################################################################################################################################################################
## First specify the packages of interest
packages = c("rstudioapi", "readxl",
"sf", "rgdal", "spData", "raster", "leaflet", "rmapshaper","geojsonio",
"tidycensus", "jsonlite", "rvest", "purrr", "httr",
"tidyverse", "lubridate", "plotly", "stringr", "rnoaa", "nhdplusTools",
"googlesheets4", "magrittr", "dplyr")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
#usgs packages
install.packages("dataRetrieval", repos=c("http://owi.usgs.gov/R", getOption("repos")))
library(dataRetrieval);  library(EGRET); #usgs links
######################################################################################################################################################################
#
#   SET GLOBAL VARIABLES
#
######################################################################################################################################################################
options(scipen=999) #changes scientific notation to numeric
rm(list=ls()) #removes anything stored in memory
# if working on a Mac use this to set working directory...
source_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(source_path))
swd_data <- paste0("../data/")
#state info
stateAbb <- "TX"
stateFips <- 48
#variables used to update data
today = substr(Sys.time(),1,10); today;
current.year <- year(today);
start.date = "1990-01-01"; #set for the start of the period that we want to assess
end.date = paste0(year(today), "-12-31")
end.year = year(Sys.time())
mymonths <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"); #used below to convert numbers to abbrev
#save out update date for dashboard
update.date <- paste0(mymonths[month(today)]," ", day(today), ", ", end.year) %>% as.data.frame()
colnames(update.date) <- "today_date"
write.csv(update.date, paste0(swd_data, "update_date.csv"), row.names=FALSE)
#calculate moving average function
ma <- function(x,n=7){stats::filter(x,rep(1/n,n), sides=1)}
#useful functions
`%notin%` = function(x,y) !(x %in% y); #function to get what is not in the list
#standardized reference for setting julian values (drops leap days)
jan1 <- as.Date("2021-01-01")
dec31 <- as.Date("2021-12-31")
julian_index <- c(seq(jan1:dec31), "NA")
all.dates <- seq(as.Date(jan1), as.Date(dec31), by = "days")
day_month <- c(substr(all.dates,6,10), "NA")
day_month_leap <- c(day_month[1:59], "02-29", day_month[60:365])
julian_index_leap <- (1:366)
julian <- as.data.frame(matrix(nrow=366))
julian$day_month <- day_month; julian$julian_index <- julian_index
julian$day_month_leap <- day_month_leap; julian$julian_index_leap <- julian_index_leap
julian.ref <- julian %>% select(!V1)
rm(jan1, dec31, julian_index, all.dates, day_month,day_month_leap, julian_index_leap, julian)
gw.boerne <- read_sf(paste0(swd_data, "gw/all_boerne_gw_sites.geojson"))
gw.unc <- read_sf("~/Desktop/Boerne IoW/TriangleWaterSupplyDashboard-master/deploy/nc-water-supply/data_state/gw/gw_sites.geojson")
mapview::mapview(gw.boerne)
mapview::mapview(gw.unc)
View(gw.boerne)
################################################################################################################################################################
# remove all except for global environment
rm(list= ls()[!(ls() %in% c('julian.ref','update.date', 'current.month', 'current.year', 'end.date', 'end.year',
'mymonths', 'source_path', 'start.date', 'state_fips', 'stateAbb', 'stateFips', 'swd_data', 'today',
'%notin%', 'ma'))])
######################################################################################################################################################################
#
#   Load Old Data
#
######################################################################################################################################################################
#load in geojson for utilities
utilities <- read_sf(paste0(swd_data, "boerne_utility.geojson"));
pwsid.list <- unique(utilities$pwsid) #Boerne is the utility of interest
mymonths <- c("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"); #used below to convert numbers to abbrev
#read in old data
old_total_demand <- read.csv(paste0(swd_data, "demand/boerne_total_demand.csv"))
old_demand_by_source <- read.csv(paste0(swd_data, "demand/boerne_demand_by_source.csv"))
old_reclaimed <- read.csv(paste0(swd_data, "demand/boerne_reclaimed_water.csv"))
old_pop <- read.csv(paste0(swd_data, "demand/boerne_pop.csv"))
#calculate moving average function
ma <- function(x,n=7){stats::filter(x,rep(1/n,n), sides=1)}
######################################################################################################################################################################
#
# Read in new water demand data
#
#####################################################################################################################################################################
gs4_auth()
demand_data <- read_sheet("https://docs.google.com/spreadsheets/d/1BKb9Q6UFEBNsGrLZhjdq2kKX5t1GqPFCWF553afUKUg/edit#gid=2030520898", sheet = 1, range = "A229:H", col_names = FALSE,col_types = "Dnnnnnnn")
demand_by_source <- demand_data[, c("...1", "...2", "...3", "...6", "...7", "...8")]
#rename columns
demand_by_mgd <- rename(demand_by_source, date = "...1", groundwater = "...2", boerne_lake = "...3", GBRA = "...6", reclaimed = "...7", total = "...8")
#replace na's with 0s
demand_by_mgd <- as.data.frame(demand_by_mgd)
demand_by_mgd[is.na(demand_by_mgd)] <- 0
demand_by_mgd <- as.data.frame(demand_by_mgd)
#change units to MGD
demand_by_mgd$groundwater <- demand_by_mgd$groundwater/1000; demand_by_mgd$boerne_lake <- demand_by_mgd$boerne_lake/1000; demand_by_mgd$GBRA <- demand_by_mgd$GBRA/1000; demand_by_mgd$reclaimed <- demand_by_mgd$reclaimed/1000; demand_by_mgd$total <- demand_by_mgd$total/1000;
#include PWSId
demand_by_mgd$pwsid <- utilities$pwsid
#add julian indexing
#nx <- demand_by_mgd %>% mutate(year = year(date), month = month(date), day = day(date))
nx <- demand_by_mgd %>% mutate(year = year(date), day_month = substr(date, 6, 10))
for(i in 1:nrow(nx)) { #computationally slow. There's almost certainly a faster way. But it works.
if(leap_year(nx$year[i]) == TRUE) {nx$julian[i] <- julian.ref$julian_index_leap[julian.ref$day_month_leap == nx$day_month[i]]}
if(leap_year(nx$year[i]) == FALSE) {nx$julian[i] <- julian.ref$julian_index[julian.ref$day_month == nx$day_month[i]]}
print(paste(round(i/nrow(nx)*100,2),"% complete"))
}
demand_by_mgd <- nx
#split date by month and day
demand_by_mgd = demand_by_mgd %>%
mutate(date = ymd(date)) %>%
mutate_at(vars(date), funs(year, month, day))
demand_by_mgd$day <- as.numeric(demand_by_mgd$day)
str(demand_by_mgd)
new_demand_by_mgd <- demand_by_mgd %>% filter(year >= 2022 & date < today)
new_demand_by_mgd$date <- format(as.Date(new_demand_by_mgd$date), "%Y-%m-%d") # make sure the date format is the same for old and new before binding
#merge old and new data
all_demand_by_mgd <- rbind(old_demand_by_source, new_demand_by_mgd)
check.last.date <- all_demand_by_mgd %>% filter(date == max(date)) %>% dplyr::select(date, month)
table(check.last.date$date)
#write.csv
write.csv(demand_by_mgd, paste0(swd_data, "demand/all_boerne_demand_by_source.csv"), row.names=FALSE)
#include month abbreviations
demand2 <- all_demand_by_mgd %>% group_by(pwsid) %>% mutate(julian = as.numeric(strftime(date, format = "%j")), month = month(date), monthAbb = mymonths[month], year = year(date))
#calculate mean demand
demand2 <- all_demand_by_mgd %>% mutate(date = as.Date(substr(date,1,10),format='%Y-%m-%d'))
demand3 <- demand2 %>% group_by(pwsid) %>% arrange(date) %>% mutate(timeDays = as.numeric(date - lag(date)))
demand4 <- demand3 %>% group_by(pwsid) %>% mutate(mean_demand = ifelse(timeDays <= 3, round(as.numeric(ma(total)),2), total),
julian = as.numeric(strftime(date, format = "%j")), month = month(date), monthAbb = mymonths[month], year = year(date))
demand5 <- demand4 %>% mutate(total = round(total,2), mean_demand = ifelse(is.na(mean_demand)==TRUE, total, mean_demand))
#calculate monthly peak
demand6 <- demand5 %>% group_by(pwsid, month, year) %>% mutate(peak_demand = round(quantile(total, 0.98),1)); #took the 98% to omit outliers
#provide julian date
demand7 <- demand6 %>% mutate(date2 = date, date = paste0(monthAbb,"-",day(date2))) %>% select(-timeDays)
#clean up
demand7 <- rename(demand7, demand_mgd = "total")
demand7 <- demand7[, c("pwsid", "date","demand_mgd", "mean_demand", "julian", "month", "monthAbb", "year", "peak_demand", "date2")]
#write.csv
write.csv(demand7, paste0(swd_data, "demand/all_boerne_total_demand.csv"), row.names=FALSE)
#create comulative demand
demand.data <- demand7 %>% filter(date2>start.date)
foo.count <- demand.data %>% group_by(pwsid, year) %>% count() %>% filter(year < current.year & n>340 | year == current.year) %>% mutate(idyr = paste0(pwsid,"-",year))
foo.cum <- demand.data %>% mutate(idyr = paste0(pwsid,"-",year)) %>% filter(idyr %in% foo.count$idyr) %>% arrange(pwsid, year, month, date2)
foo.cum <- foo.cum %>% distinct() %>% filter(year>=2000); #shorten for this file
foo.cum2 <- foo.cum %>% arrange(pwsid, year, julian) %>% dplyr::select(pwsid, year, date, julian, demand_mgd) %>% distinct() %>%
group_by(pwsid, year) %>% mutate(demand_mgd2 = ifelse(is.na(demand_mgd), 0, demand_mgd)) %>%  mutate(cum_demand = cumsum(demand_mgd2)) %>% dplyr::select(-demand_mgd, -demand_mgd2) %>% rename(demand_mgd = cum_demand) %>% distinct()
table(foo.cum$pwsid, foo.cum$year)
#in case duplicate days - take average
foo.cum3 <- foo.cum2 %>% group_by(pwsid, year, julian, date) %>% summarize(demand_mgd = round(mean(demand_mgd, na.rm=TRUE),2), .groups="drop") %>% distinct()
write.csv(foo.cum3, paste0(swd_data, "demand/all_boerne_demand_cum.csv"), row.names=FALSE)
######################################################################################################################################################################
#
# Reclaimed water data
#
#####################################################################################################################################################################
new_reclaimed <- subset(new_demand_by_mgd, select = -c(total,groundwater,boerne_lake,GBRA))
all_reclaimed <- rbind(old_reclaimed, new_reclaimed)
#include month abbreviations
all_reclaimed2 <- all_reclaimed %>% group_by(pwsid) %>% mutate(julian = as.numeric(strftime(date, format = "%j")), month = month(date), monthAbb = mymonths[month], year = year(date))
#calculate mean demand
all_reclaimed2 <- all_reclaimed2 %>% mutate(date = as.Date(substr(date,1,10),format='%Y-%m-%d'))
all_reclaimed3 <- all_reclaimed2 %>% group_by(pwsid) %>% arrange(date) %>% mutate(timeDays = as.numeric(date - lag(date)))
all_reclaimed4 <- all_reclaimed3 %>% group_by(pwsid) %>% mutate(mean_reclaimed = ifelse(timeDays <= 3, round(as.numeric(ma(reclaimed)),2), reclaimed),
julian = as.numeric(strftime(date, format = "%j")), month = month(date), monthAbb = mymonths[month], year = year(date))
all_reclaimed5 <- all_reclaimed4 %>% mutate(reclaimed = round(reclaimed,2), mean_reclaimed = ifelse(is.na(mean_reclaimed)==TRUE, reclaimed, mean_reclaimed))
#calculate monthly peak
all_reclaimed6 <- all_reclaimed5 %>% group_by(pwsid, month, year) %>% mutate(peak_reclaimed = round(quantile(reclaimed, 0.98),1)); #took the 98% to omit outliers
#provide julian date
all_reclaimed7 <- all_reclaimed6 %>% mutate(date2 = date, date = paste0(monthAbb,"-",day(date2))) %>% select(-timeDays)
#write.csv
all_reclaimed8 <- subset(all_reclaimed7, select = c(pwsid, date, reclaimed, mean_reclaimed, julian, month, monthAbb, year, peak_reclaimed, date2))
write.csv(all_reclaimed8, paste0(swd_data, "demand/all_boerne_reclaimed_water.csv"), row.names=FALSE)
View(all_reclaimed8)
#calculate percent of total
all_reclaimed9 <- all_reclaimed8
View(all_demand_by_mgd)
all_reclaimed9$total <- all_demand_by_mgd$total
View(all_reclaimed9)
all_reclaimed9$percent_of_total <- (reclaimed/total)*100
all_reclaimed9$percent_of_total <- (all_reclaimed9$reclaimed/all_reclaimed9$total)*100
#write.csv
write.csv(all_reclaimed9, paste0(swd_data, "demand/all_boerne_reclaimed_percent_of_total.csv"), row.names=FALSE)
